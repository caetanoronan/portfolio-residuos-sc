"""
Dashboard Interativo - An√°lise de Res√≠duos em Santa Catarina
Gr√°ficos interativos com Plotly para visualiza√ß√£o de dados
"""
import geopandas as gpd
import pandas as pd
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import requests

print("="*70)
print("üìä CRIANDO DASHBOARD INTERATIVO DE AN√ÅLISE DE RES√çDUOS")
print("="*70)

# ============================================================================
# 1. CARREGAR E PREPARAR DADOS
# ============================================================================
print("\n1Ô∏è‚É£ Carregando dados...")

# Carregar CSVs existentes
df_bacias = pd.read_csv(r'outputs\resumo_por_bacia.csv')
df_regioes = pd.read_csv(r'outputs\resumo_por_regiao.csv')
df_risco = pd.read_csv(r'outputs\analise_risco_municipios.csv')

# Carregar setores para an√°lise municipal completa
gdf = gpd.read_file(r'SC_setores_CD2022.gpkg')

# Buscar popula√ß√£o municipal
print("   Buscando popula√ß√£o via API IBGE...")
try:
    url = "https://servicodados.ibge.gov.br/api/v3/agregados/4714/periodos/2022/variaveis/93?localidades=N6[all]"
    r = requests.get(url, timeout=30)
    r.raise_for_status()
    data = r.json()
    rows = []
    for item in data[0]['resultados']:
        for loc in item['series']:
            codigo = str(loc['localidade']['id']).zfill(7)
            nome = loc['localidade']['nome']
            pop = list(loc['serie'].values())[0] if loc['serie'] else None
            if pop:
                rows.append({
                    'codigo_ibge': codigo,
                    'municipio': nome,
                    'populacao': float(pop)
                })
    pop_df = pd.DataFrame(rows)
    pop_df['domestico_t_ano'] = pop_df['populacao'] * 0.95 * 365 / 1000
    pop_df['reciclavel_t_ano'] = pop_df['domestico_t_ano'] * 0.10
    print(f"   ‚úì {len(pop_df)} munic√≠pios carregados")
except Exception as e:
    print(f"   ‚ö†Ô∏è Erro: {e}")
    pop_df = None

# ============================================================================
# 2. PREPARAR DADOS PARA GR√ÅFICOS
# ============================================================================
print("\n2Ô∏è‚É£ Processando dados para visualiza√ß√µes...")

# Top 15 munic√≠pios
if pop_df is not None:
    top_municipios = pop_df.nlargest(15, 'domestico_t_ano')
    
    # Estat√≠sticas gerais
    total_pop = pop_df['populacao'].sum()
    total_domestico = pop_df['domestico_t_ano'].sum()
    total_reciclavel = pop_df['reciclavel_t_ano'].sum()
    
    print(f"   üìä Popula√ß√£o total SC: {total_pop:,.0f} habitantes")
    print(f"   üîµ Res√≠duos dom√©sticos: {total_domestico:,.0f} t/ano")
    print(f"   üü° Res√≠duos recicl√°veis: {total_reciclavel:,.0f} t/ano")

# ============================================================================
# 3. CRIAR GR√ÅFICOS INTERATIVOS
# ============================================================================
print("\n3Ô∏è‚É£ Criando gr√°ficos interativos...")

# Cores do tema
COLORS = {
    'primary': '#667eea',
    'secondary': '#764ba2',
    'domestico': '#034e7b',
    'reciclavel': '#e31a1c',
    'background': '#f8f9fa',
    'text': '#333333'
}

# ---------------------------------------------------------------------------
# GR√ÅFICO 1: Top 15 Munic√≠pios - Res√≠duos Dom√©sticos
# ---------------------------------------------------------------------------
fig1 = go.Figure()

fig1.add_trace(go.Bar(
    y=top_municipios['municipio'],
    x=top_municipios['domestico_t_ano'],
    orientation='h',
    marker=dict(
        color=top_municipios['domestico_t_ano'],
        colorscale='Blues',
        showscale=True,
        colorbar=dict(title="t/ano")
    ),
    text=top_municipios['domestico_t_ano'].apply(lambda x: f'{x:,.0f}'),
    textposition='outside',
    hovertemplate='<b>%{y}</b><br>Res√≠duos: %{x:,.0f} t/ano<extra></extra>'
))

fig1.update_layout(
    title='üîµ Top 15 Munic√≠pios - Gera√ß√£o de Res√≠duos Dom√©sticos',
    xaxis_title='Toneladas por Ano',
    yaxis_title='',
    height=600,
    template='plotly_white',
    font=dict(size=12),
    showlegend=False
)

# ---------------------------------------------------------------------------
# GR√ÅFICO 2: Distribui√ß√£o por Bacias Hidrogr√°ficas
# ---------------------------------------------------------------------------
fig2 = go.Figure()

cores_bacias = ['#1976d2', '#388e3c', '#7b1fa2', '#0097a7', 
                '#00796b', '#f57c00', '#5d4037', '#757575']

fig2.add_trace(go.Bar(
    x=df_bacias['bacia'],
    y=df_bacias['domestico_t_ano'],
    name='Dom√©stico',
    marker_color='#034e7b',
    text=df_bacias['domestico_t_ano'].apply(lambda x: f'{x:,.0f}'),
    textposition='outside'
))

fig2.add_trace(go.Bar(
    x=df_bacias['bacia'],
    y=df_bacias['reciclavel_t_ano'],
    name='Recicl√°vel',
    marker_color='#fbc02d',
    text=df_bacias['reciclavel_t_ano'].apply(lambda x: f'{x:,.0f}'),
    textposition='outside'
))

fig2.update_layout(
    title='üåä Gera√ß√£o de Res√≠duos por Bacia Hidrogr√°fica',
    xaxis_title='Bacia Hidrogr√°fica',
    yaxis_title='Toneladas por Ano',
    height=500,
    template='plotly_white',
    barmode='group',
    xaxis_tickangle=-45
)

# ---------------------------------------------------------------------------
# GR√ÅFICO 3: Pizza - Distribui√ß√£o de Risco
# ---------------------------------------------------------------------------
risco_counts = df_risco['risco'].value_counts()

fig3 = go.Figure(data=[go.Pie(
    labels=risco_counts.index,
    values=risco_counts.values,
    hole=0.4,
    marker=dict(colors=['#d32f2f', '#f57c00', '#fbc02d', '#388e3c']),
    textinfo='label+percent+value',
    hovertemplate='<b>%{label}</b><br>Munic√≠pios: %{value}<br>%{percent}<extra></extra>'
)])

fig3.update_layout(
    title='‚ö†Ô∏è Distribui√ß√£o de Munic√≠pios por N√≠vel de Risco',
    height=450,
    template='plotly_white',
    annotations=[dict(text='Risco', x=0.5, y=0.5, font_size=20, showarrow=False)]
)

# ---------------------------------------------------------------------------
# GR√ÅFICO 4: Top 10 Regi√µes (RGI)
# ---------------------------------------------------------------------------
top_regioes = df_regioes.nlargest(10, 'domestico_t_ano')

fig4 = go.Figure()

fig4.add_trace(go.Scatter(
    x=top_regioes['populacao'],
    y=top_regioes['domestico_t_ano'],
    mode='markers+text',
    marker=dict(
        size=top_regioes['domestico_t_ano'] / 5000,
        color=top_regioes['domestico_t_ano'],
        colorscale='Viridis',
        showscale=True,
        colorbar=dict(title="t/ano"),
        line=dict(width=2, color='white')
    ),
    text=top_regioes['NM_RGI'],
    textposition='top center',
    textfont=dict(size=9),
    hovertemplate='<b>%{text}</b><br>Popula√ß√£o: %{x:,.0f}<br>Res√≠duos: %{y:,.0f} t/ano<extra></extra>'
))

fig4.update_layout(
    title='üìç Top 10 Regi√µes (RGI) - Popula√ß√£o vs Res√≠duos',
    xaxis_title='Popula√ß√£o',
    yaxis_title='Res√≠duos Dom√©sticos (t/ano)',
    height=500,
    template='plotly_white'
)

# ---------------------------------------------------------------------------
# GR√ÅFICO 5: Comparativo Bacias vs Regi√µes
# ---------------------------------------------------------------------------
fig5 = make_subplots(
    rows=1, cols=2,
    subplot_titles=('Popula√ß√£o por Bacia', 'Popula√ß√£o por Regi√£o (Top 5)'),
    specs=[[{'type': 'domain'}, {'type': 'domain'}]]
)

fig5.add_trace(go.Pie(
    labels=df_bacias['bacia'],
    values=df_bacias['populacao'],
    name='Bacias',
    marker=dict(colors=cores_bacias)
), 1, 1)

top5_regioes = df_regioes.nlargest(5, 'populacao')
fig5.add_trace(go.Pie(
    labels=top5_regioes['NM_RGI'],
    values=top5_regioes['populacao'],
    name='Regi√µes'
), 1, 2)

fig5.update_layout(
    title_text='üó∫Ô∏è Distribui√ß√£o Populacional: Bacias vs Regi√µes',
    height=400,
    showlegend=True,
    template='plotly_white'
)

# ---------------------------------------------------------------------------
# GR√ÅFICO 6: Heatmap - Correla√ß√£o
# ---------------------------------------------------------------------------
if pop_df is not None:
    # Top 20 para o heatmap (melhor visualiza√ß√£o)
    top20 = pop_df.nlargest(20, 'populacao')[['municipio', 'populacao', 'domestico_t_ano', 'reciclavel_t_ano']]
    
    fig6 = go.Figure(data=go.Heatmap(
        z=[top20['populacao'].values, 
           top20['domestico_t_ano'].values, 
           top20['reciclavel_t_ano'].values],
        x=top20['municipio'].values,
        y=['Popula√ß√£o', 'Dom√©stico (t/ano)', 'Recicl√°vel (t/ano)'],
        colorscale='RdYlBu_r',
        hovertemplate='<b>%{x}</b><br>%{y}: %{z:,.0f}<extra></extra>'
    ))
    
    fig6.update_layout(
        title='üî• Heatmap - Top 20 Munic√≠pios',
        height=300,
        template='plotly_white',
        xaxis_tickangle=-45
    )

# ============================================================================
# 4. CRIAR HTML DO DASHBOARD
# ============================================================================
print("\n4Ô∏è‚É£ Montando dashboard HTML...")

html_content = f"""
<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Dashboard - An√°lise de Res√≠duos SC</title>
    <script src="https://cdn.plot.ly/plotly-2.26.0.min.js"></script>
    <style>
        * {{
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }}
        
        body {{
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            padding: 20px;
            min-height: 100vh;
        }}
        
        .container {{
            max-width: 1400px;
            margin: 0 auto;
        }}
        
        header {{
            background: white;
            padding: 30px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
            text-align: center;
        }}
        
        h1 {{
            color: #667eea;
            font-size: 2.5em;
            margin-bottom: 10px;
        }}
        
        .subtitle {{
            color: #666;
            font-size: 1.1em;
        }}
        
        .stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 20px;
            margin-bottom: 30px;
        }}
        
        .stat-card {{
            background: white;
            padding: 20px;
            border-radius: 10px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            text-align: center;
        }}
        
        .stat-number {{
            font-size: 2em;
            font-weight: bold;
            color: #667eea;
            margin: 10px 0;
        }}
        
        .stat-label {{
            color: #666;
            font-size: 0.9em;
        }}
        
        .chart-container {{
            background: white;
            padding: 20px;
            border-radius: 15px;
            box-shadow: 0 10px 30px rgba(0,0,0,0.2);
            margin-bottom: 30px;
        }}
        
        .grid-2 {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(500px, 1fr));
            gap: 30px;
            margin-bottom: 30px;
        }}
        
        .back-button {{
            display: inline-block;
            background: white;
            color: #667eea;
            padding: 12px 30px;
            text-decoration: none;
            border-radius: 25px;
            font-weight: bold;
            transition: transform 0.3s;
            margin-top: 20px;
        }}
        
        .back-button:hover {{
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(0,0,0,0.2);
        }}
        
        footer {{
            text-align: center;
            color: white;
            padding: 20px;
            margin-top: 30px;
        }}
    </style>
</head>
<body>
    <div class="container">
        <header>
            <h1>üìä Dashboard Interativo</h1>
            <p class="subtitle">An√°lise de Res√≠duos S√≥lidos em Santa Catarina</p>
        </header>
        
        <div class="stats">
            <div class="stat-card">
                <div class="stat-label">Popula√ß√£o Total</div>
                <div class="stat-number">{total_pop:,.0f}</div>
                <div class="stat-label">habitantes</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Res√≠duos Dom√©sticos</div>
                <div class="stat-number">{total_domestico:,.0f}</div>
                <div class="stat-label">toneladas/ano</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Res√≠duos Recicl√°veis</div>
                <div class="stat-number">{total_reciclavel:,.0f}</div>
                <div class="stat-label">toneladas/ano</div>
            </div>
            <div class="stat-card">
                <div class="stat-label">Munic√≠pios Analisados</div>
                <div class="stat-number">{len(pop_df)}</div>
                <div class="stat-label">em 7 bacias</div>
            </div>
        </div>
        
        <div class="chart-container">
            <div id="chart1"></div>
        </div>
        
        <div class="chart-container">
            <div id="chart2"></div>
        </div>
        
        <div class="grid-2">
            <div class="chart-container">
                <div id="chart3"></div>
            </div>
            <div class="chart-container">
                <div id="chart4"></div>
            </div>
        </div>
        
        <div class="chart-container">
            <div id="chart5"></div>
        </div>
        
        <div class="chart-container">
            <div id="chart6"></div>
        </div>
        
        <div style="text-align: center;">
            <a href="../../index.html" class="back-button">‚¨ÖÔ∏è Voltar ao Portf√≥lio</a>
        </div>
        
        <footer>
            <p>Dashboard gerado automaticamente com Plotly | 2025</p>
        </footer>
    </div>
    
    <script>
        // Gr√°fico 1
        var chart1 = {fig1.to_json()};
        Plotly.newPlot('chart1', chart1.data, chart1.layout, {{responsive: true}});
        
        // Gr√°fico 2
        var chart2 = {fig2.to_json()};
        Plotly.newPlot('chart2', chart2.data, chart2.layout, {{responsive: true}});
        
        // Gr√°fico 3
        var chart3 = {fig3.to_json()};
        Plotly.newPlot('chart3', chart3.data, chart3.layout, {{responsive: true}});
        
        // Gr√°fico 4
        var chart4 = {fig4.to_json()};
        Plotly.newPlot('chart4', chart4.data, chart4.layout, {{responsive: true}});
        
        // Gr√°fico 5
        var chart5 = {fig5.to_json()};
        Plotly.newPlot('chart5', chart5.data, chart5.layout, {{responsive: true}});
        
        // Gr√°fico 6
        var chart6 = {fig6.to_json()};
        Plotly.newPlot('chart6', chart6.data, chart6.layout, {{responsive: true}});
    </script>
</body>
</html>
"""

# Salvar HTML
output_path = r'outputs\dashboard.html'
with open(output_path, 'w', encoding='utf-8') as f:
    f.write(html_content)

import os
file_size = os.path.getsize(output_path) / (1024 * 1024)

print(f"\n‚úÖ Dashboard criado com sucesso!")
print(f"üìÅ Arquivo: {output_path}")
print(f"üíæ Tamanho: {file_size:.2f} MB")
print(f"\nüìä Gr√°ficos inclu√≠dos:")
print("   1. Top 15 Munic√≠pios - Res√≠duos Dom√©sticos")
print("   2. Distribui√ß√£o por Bacias Hidrogr√°ficas")
print("   3. Pizza - N√≠veis de Risco")
print("   4. Top 10 Regi√µes - Popula√ß√£o vs Res√≠duos")
print("   5. Comparativo Bacias vs Regi√µes")
print("   6. Heatmap - Top 20 Munic√≠pios")

print("\n" + "="*70)
print("‚úÖ DASHBOARD INTERATIVO CONCLU√çDO!")
print("="*70)
